class Solution{   
public:
    bool isSubsetSum(vector<int>arr, int sum){
        int n=arr.size();
        vector<vector<bool>> dp(n+1, vector<bool>(sum+1));
        
        for(int i=0;i<=n;i++)
            dp[i][0]=1;
        for(int i=1;i<=sum;i++)
            dp[0][i]=0;
        
        for(int i = 1;i<=n;i++){
            for(int j = 1;j<=sum;j++){
                if(arr[i-1]<=j)
                   dp[i][j] = max(dp[i-1][j-arr[i-1]],dp[i-1][j]);
                else
                   dp[i][j] = dp[i-1][j];
            }
        }
        return dp[arr.size()][sum];
    }
};



************************************************************************************************************************************************

RECURSIVE CALL********


class Solution{   
public:
    bool find(int i, vector<int> arr, int sum , vector<vector<int>> &dp)
    {
        if(i==arr.size()-1)   return sum==arr[i];
        
        if(dp[i][sum]!=-1)  return dp[i][sum];
        
        bool not_take=find(i+1, arr, sum ,dp );
        
        bool take=false;
        if(arr[i]<=sum) take=find(i+1 , arr, sum-arr[i] , dp);
        
        return dp[i][sum] = take|not_take;
    }
    
    bool isSubsetSum(vector<int> arr, int sum){
        
        vector<vector<int >> dp(arr.size() , vector<int>(sum+1,-1));
        
        return find(0,arr,sum , dp);
    }
};
