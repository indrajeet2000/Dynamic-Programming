❌ Solution - I (Brute-Force)


class Solution {
public:
    bool canPartition(vector<int>& nums, int i = 0, int sum1 = 0, int sum2 = 0) {
        if(i >= size(nums)) return sum1 == sum2;                    // check if both subset have equal sum
        return canPartition(nums, i+1, sum1 + nums[i], sum2)        // try including into subset-1
		    || canPartition(nums, i+1, sum1, sum2 + nums[i]);       // try including into subset-2
    }
};

***********************************************************************************************************************************************************************

class Solution {
public:
    bool canPartition(vector<int>& nums) {
        int totalSum = accumulate(begin(nums), end(nums), 0);
        if(totalSum & 1) return false;
        return subsetSum(nums, totalSum / 2);
    }
    bool subsetSum(vector<int>& nums, int sum, int i = 0) {
        if(sum == 0) return true;                         // subset formed with required half-sum
        if(i >= size(nums) || sum < 0) return false; 
        return subsetSum(nums, sum - nums[i], i + 1)      // include current element
            || subsetSum(nums, sum, i + 1);               // exclude current element
    }
};


***********************************************************************************************************************************************************************

✔️ Solution - II (Dynamic Programming - Memoization)

class Solution {
public:
    int8_t dp[201][10001] = {[0 ... 200] = {[0 ... 10000] = -1}};  // all initialized to -1 (use dynamic vector to generalize to higher array size & possible sums)
    bool canPartition(vector<int>& nums) {
        int totalSum = accumulate(begin(nums), end(nums), 0);
        if(totalSum & 1) return false;
        return subsetSum(nums, totalSum / 2);
    }
    bool subsetSum(vector<int>& nums, int sum, int i = 0) {
        if(sum == 0) return true;
        if(i >= size(nums) || sum < 0) return false; 
        if(dp[i][sum] != -1) return dp[i][sum];
        return dp[i][sum] = subsetSum(nums, sum - nums[i], i + 1) || subsetSum(nums, sum, i + 1);
    }
};

***********************************************************************************************************************************************************************

✔️ Solution - III (Optimized Dynamic Programming - Memoization)

class Solution {
public:
    int8_t dp[10001] = {[0 ... 10000] = -1};
    bool canPartition(vector<int>& nums) {
        int totalSum = accumulate(begin(nums), end(nums), 0);
        if(totalSum & 1) return false;
        return subsetSum(nums, totalSum / 2);
    }
    bool subsetSum(vector<int>& nums, int sum, int i = 0) {
        if(sum == 0) return true;
        if(i >= size(nums) || sum < 0) return false; 
        if(dp[sum] != -1) return dp[sum];
        return dp[sum] = subsetSum(nums, sum - nums[i], i + 1) || subsetSum(nums, sum, i + 1);
    }
};

***********************************************************************************************************************************************************************

✔️ Solution - IV (Dynamic Programming - Tabulation)

class Solution {
public:
    bool canPartition(vector<int>& nums) {
        int totalSum = accumulate(begin(nums), end(nums), 0), halfSum = totalSum / 2;
        if(totalSum & 1) return false;
        bool dp[halfSum+1]; memset(dp, false, sizeof dp);
        dp[0] = true;                              // 0 sum is always achievable
        for(int num : nums) 
            for(int j = halfSum; j >= num; j--)    // essential to start right to left
                if(dp[j - num])                    // if j - num was previously achievable
                    dp[j] = true;                  // we can add num to it and make j achievable as well
            
        return dp[halfSum];
    }
};
